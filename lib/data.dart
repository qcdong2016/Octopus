import 'dart:convert';
import 'dart:math';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:octopus/pb/msg.pb.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:window_manager/window_manager.dart';

import 'event/event.dart';
import 'main.dart';
import 'native_notify.dart';

class LoginData {
  String nickname = "";
  String password = "";
}

class Data {
  static EventList onLogin = EventList();
  static LoginData loginData = LoginData();
  static Autogenerated data = Autogenerated();
  static String _server = "";
  static String get server => _server;
  static set server(String v) {
    _server = v;
    save();
  }

  static save() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    prefs.setString("server", _server);
  }

  static void setUP(String nickname, String password) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    prefs.setString("nickname", nickname);
    prefs.setString("password", password);

    loginData.nickname = nickname;
    loginData.password = password;
  }

  static Future<void> init(fn) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? svr = prefs.getString("server");

    if (svr == null || svr == "") {
      svr = "127.0.0.1:7457";
    }

    server = svr;

    String? nickname = prefs.getString("nickname");
    String? password = prefs.getString("password");
    if (nickname != null) {
      loginData.nickname = nickname;
    }

    if (password != null) {
      loginData.password = password;
    }

    fn();
  }
}

// https://javiercbk.github.io/json_to_dart/
class Autogenerated {
  ScrollController pageScrollerController = ScrollController();
  ScrollController friendsScrollerController = ScrollController();

  User me = User();
  List<User> friends = [];

  Map<int, List<Message>> messages = {};

  Autogenerated();

  EventList chatTargetEvent = EventList();
  EventList friendListEvent = EventList();
  EventList msgCurrentEvent = EventList();

  init(OnLogin d) {
    friends.clear();
    messages.clear();
    me._d = d.me;
    for (var i = 0; i < d.friends.length; i++) {
      var u = User();
      u._d = d.friends[i];
      friends.add(u);
    }
    friendListEvent.emit();
  }

  User _chatTarget = User();
  User get chatTarget => _chatTarget;
  set chatTarget(User value) {
    if (_chatTarget != null) {
      _chatTarget.iscurrent = false;
    }
    _chatTarget = value;
    _chatTarget.unread = 0;
    _chatTarget.iscurrent = true;
    chatTargetEvent.emit();
    animateScroller(pageScrollerController);
  }

  setUserOffline(int uid) {
    for (var element in friends) {
      if (element.iD == uid) {
        element.online = false;
      }
    }
  }

  User getUser(int uid) {
    for (var element in friends) {
      if (element.iD == uid) {
        return element;
      }
    }
    return me;
  }

  setUserOnline(User u) {
    bool check = false;
    for (var element in friends) {
      if (element.iD == u.iD) {
        check = true;
        element.online = true;
      }
    }
    if (!check) {
      u.online = true;
      friends.add(u);
      friendListEvent.emit();
    }
  }

  List<Message> getMessage(int target) {
    List<Message>? list = messages[target];
    if (list == null) {
      list = [];
      messages[target] = list;
    }
    return list;
  }

  Future<void> addMessage(Message msg) async {
    List<Message> list;

    if (msg.from == me.iD) {
      list = getMessage(msg.to);
    } else {
      list = getMessage(msg.from);
    }
    var content = base64Decode(msg.content);
    msg.content = utf8.decode(content);
    list.add(msg);

    bool shouldEmit = false;

    if (msg.from != me.iD) {
      var index = friends.indexWhere((element) => element.iD == msg.from);
      var user = friends.removeAt(index);
      friends.insert(0, user);
      shouldEmit = true;
      friendListEvent.emit();
      animateScrollerTop(friendsScrollerController);
    }

    if (msg.from == chatTarget.iD || msg.from == me.iD) {
      shouldEmit = true;
      animateScroller(pageScrollerController);
    } else {
      for (var element in friends) {
        if (element.iD == msg.from) {
          element.unread++;
        }
      }
    }

    if (shouldEmit) {
      msgCurrentEvent.emit();
    }

    if (!await windowManager.isFocused()) {
      User user = Data.data.getUser(msg.from);
      NativeNotify.show(user.nickname, "发来一条消息");
    }
  }

  animateScrollerTop(ScrollController controller) {
    Future.delayed(const Duration(milliseconds: 100), () {
      controller.jumpTo(
        controller.position.minScrollExtent,
        // curve: Curves.easeOut, //动画效果
        // duration: const Duration(milliseconds: 100),
      );
    });
  }

  animateScroller(ScrollController controller) {
    Future.delayed(const Duration(milliseconds: 100), () {
      controller.jumpTo(
        controller.position.maxScrollExtent,
        // curve: Curves.easeOut, //动画效果
        // duration: const Duration(milliseconds: 100),
      );
    });
  }
}

class Message extends EventList {
  String type = "";
  int from = 0;
  int sender = 0;
  int to = 0;
  String content = "";
  String url = "";
  String filename = "";
  String savepath = "";

  double _progress = 0;
  double get progress => _progress;
  set progress(double value) {
    _progress = value;
    emit();
  }

  bool _downloading = false;
  bool get downloading => _downloading;
  set downloading(bool value) {
    _downloading = value;
    emit();
  }

  Message fromJson(Map<String, dynamic> json) {
    type = json['Type'];
    from = json['From'];
    to = json['To'];

    if (json.containsKey("Sender")) {
      sender = json["Sender"];
    }

    if (type == "text") {
      content = json['Content'];
    } else {
      url = json["URL"];
      filename = json["FileName"];
    }

    return this;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Type'] = type;
    data['From'] = from;
    data['To'] = to;
    data['Content'] = content;
    return data;
  }
}

class User extends EventList {
  Friend _d = Friend();
  int iD = 0;
  String get nickname => _d.nickname;
  String get avatar => _d.avatar;

  bool _current = false;
  bool get iscurrent => _current;
  set iscurrent(bool value) {
    _current = value;
    emit();
  }

  bool _online = false;
  bool get online => _online;
  set online(bool value) {
    _online = value;
    emit();
  }

  int _unread = 0;
  int get unread => _unread;
  set unread(int value) {
    _unread = value;
    emit();
  }

  bool group = false;
}
