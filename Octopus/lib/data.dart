import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

import 'event/event.dart';

class Data {
  static Autogenerated data = Autogenerated();
  static String _server = "";
  static String get server => _server;
  static set server(String v) {
    _server = v;
    save();
  }

  static save() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    prefs.setString("server", _server);
  }

  static Future<void> init() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? svr = prefs.getString("server");
    if (svr == null) {
      svr = "ws://127.0.0.1:7457";
      server = svr;
      save();
    }

    server = svr;
  }
}

// https://javiercbk.github.io/json_to_dart/
class Autogenerated extends EventList {
  User me = User();
  List<User> friends = [];

  Map<int, List<Message>> messages = {};

  Autogenerated();

  User _chatTarget = User();
  User get chatTarget => _chatTarget;
  set chatTarget(User value) {
    _chatTarget = value;
    _chatTarget.unread = 0;
    emit();
  }

  setUserOffline(int uid) {
    for (var element in friends) {
      if (element.iD == uid) {
        element.online = false;
      }
    }
  }

  setUserOnline(User u) {
    bool check = false;
    for (var element in friends) {
      if (element.iD == u.iD) {
        check = true;
        element.online = true;
      }
    }
    if (!check) {
      u.online = true;
      friends.add(u);
      emit();
    }
  }

  List<Message> getMessage(int target) {
    List<Message>? list = messages[target];
    if (list == null) {
      list = [];
      messages[target] = list;
    }
    return list;
  }

  void addMessage(Message msg) {
    List<Message> list;

    if (msg.from == me.iD) {
      list = getMessage(msg.to);
    } else {
      list = getMessage(msg.from);
    }
    var content = base64Decode(msg.content);
    msg.content = utf8.decode(content);
    list.add(msg);

    if (msg.from == chatTarget.iD || msg.from == me.iD) {
      emit();
    } else {
      for (var element in friends) {
        if (element.iD == msg.from) {
          element.unread++;
        }
      }
    }
  }

  Autogenerated.fromJson(Map<String, dynamic> json) {
    me = User.fromJson(json['Me']);
    friends = <User>[];
    json['Friends'].forEach((v) {
      friends.add(User.fromJson(v));
    });
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Me'] = me.toJson();
    data['Friends'] = friends.map((v) => v.toJson()).toList();
    return data;
  }
}

class Message {
  String type = "";
  int from = 0;
  int to = 0;
  String content = "";
  String url = "";
  String filename = "";

  Message.fromJson(Map<String, dynamic> json) {
    type = json['Type'];
    from = json['From'];
    to = json['To'];
    content = json['Content'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['Type'] = type;
    data['From'] = from;
    data['To'] = to;
    data['Content'] = content;
    return data;
  }
}

class User extends EventList {
  int iD = 0;
  String nickname = "";
  String password = "";
  String avatar = "";
  bool _online = false;
  int _unread = 0;

  bool get online => _online;
  set online(bool value) {
    _online = value;
    emit();
  }

  int get unread => _unread;
  set unread(int value) {
    _unread = value;
    emit();
  }

  User();

  User.fromJson(Map<String, dynamic> json) {
    iD = json['ID'];
    nickname = json['Nickname'];
    password = json['Password'];
    avatar = json['Avatar'];
    _online = json['Online'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['ID'] = iD;
    data['Nickname'] = nickname;
    data['Password'] = password;
    data['Avatar'] = avatar;
    data['Online'] = _online;
    return data;
  }
}
